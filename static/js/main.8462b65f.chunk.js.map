{"version":3,"sources":["packages/camel-to-kebab/camel-to-kebab.js","components/CamelToKebab.js","packages/is-external/is-external.js","components/IsExternal.js","packages/guid/guid.js","components/Guid.js","packages/is-client/is-client.js","components/IsClient.js","components/StripChars.js","packages/strip-chars-url-safe/strip-chars-url-safe.js","packages/remove-empty-props/remove-empty-props.js","components/RemoveEmptyProps.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["string","trim","replace","toLowerCase","CamelToKebab","useState","camelToKebab","setString","className","placeholder","onChange","event","target","value","defaultValue","classNames","badge","to","customConditional","isExternal","test","IsExternal","advancedString","setAdvancedString","includes","r","Math","floor","random","toString","substring","Guid","guid","disabled","readOnly","type","onClick","window","document","IsClient","isClient","StripChars","String","stripCharsUrlSafe","fromEntries","iterable","reduce","obj","key","val","isObject","isArray","object","Array","removeEmptyProps","Object","entries","filter","map","k","v","RemoveEmptyProps","JSON","stringify","foo","bar","undefined","baz","fab","gib","nested","one","two","three","Number","four","five","six","seven","setObject","console","log","parse","mode","theme","converted","err","warn","name","wrapEnabled","editorProps","$blockScrolling","tabSize","App","href","rel","role","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8462b65f.chunk.js","sourcesContent":["export default (string = '') => {\n  return string\n    .trim()\n    .replace(/([a-z0-9])([A-Z])/g, '$1-$2')\n    .replace(/([A-Z])([A-Z])(?=[a-z])/g, '$1-$2')\n    .toLowerCase();\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport camelToKebab from '../packages/camel-to-kebab';\n\nconst CamelToKebab = () => {\n  const [string, setString] = useState(camelToKebab('deliciousCamelKebab'));\n\n  return (\n    <div className=\"container pb-4\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div className=\"card bg-secondary text-white text-center\">\n            <div className=\"card-body\">\n              <h2 className=\"card-title display-4\">\n                @bagofholding/camel-to-kebab\n              </h2>\n              <p className=\"card-text\">\n                Enter a <kbd>camelCase</kbd> string to get{' '}\n                <kbd>camel-kebabs</kbd>\n              </p>\n              <form>\n                <div className=\"row\">\n                  <div className=\"col-lg-4 offset-lg-4\">\n                    <div className=\"form-group\">\n                      <input\n                        className=\"form-control\"\n                        placeholder=\"e.g deliciousCamelKebab\"\n                        onChange={event =>\n                          setString(camelToKebab(event?.target?.value ?? ''))\n                        }\n                        defaultValue=\"deliciousCamelKebab\"\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <h2>\n                        <span\n                          className={classNames({\n                            badge: true,\n                            'badge-success': string && string !== '',\n                            'badge-danger': !string || string === ''\n                          })}\n                        >\n                          {string && string !== '' ? string : '...'}\n                        </span>\n                      </h2>\n                    </div>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CamelToKebab;\n","export default (to, customConditional) => {\n  let isExternal = false;\n\n  if (\n    /^(f|ht)tps?:\\/\\//i.test(to.toLowerCase()) ||\n    /^mailto:([^?]*)/.test(to.toLowerCase()) ||\n    /^ww(w|[0-9])(.)/.test(to.toLowerCase()) ||\n    /.(\\.|a-zA-Z)/.test(to.toLowerCase()) ||\n    (customConditional &&\n      typeof (customConditional === 'function') &&\n      customConditional(to))\n  ) {\n    isExternal = true;\n  }\n  return isExternal;\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport isExternal from '../packages/is-external';\n\nconst IsExternal = () => {\n  const [string, setString] = useState('');\n  const [advancedString, setAdvancedString] = useState('');\n\n  return (\n    <div className=\"container pb-4\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div className=\"card bg-secondary text-white text-center\">\n            <div className=\"card-body\">\n              <h2 className=\"card-title display-4\">\n                @bagofholding/is-external\n              </h2>\n              <p className=\"card-text\">\n                Enter a string below to find out if it is an external link.\n              </p>\n              <form>\n                <div className=\"row\">\n                  <div className=\"col-lg-4 offset-lg-4\">\n                    <div className=\"form-group\">\n                      <input\n                        className=\"form-control\"\n                        placeholder=\"e.g https://github.com\"\n                        value={string}\n                        onChange={event => setString(event.target.value || '')}\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <h2>\n                        <span\n                          className={classNames({\n                            badge: true,\n                            'badge-success': isExternal(string),\n                            'badge-danger': !isExternal(string)\n                          })}\n                        >\n                          {`${!isExternal(string) ? 'Not ' : ''}External`}\n                        </span>\n                      </h2>\n                    </div>\n                  </div>\n                </div>\n              </form>\n            </div>\n            <hr className=\"my-4\" />\n            <div className=\"card-body\">\n              <h3 className=\"card-title\">Custom Conditional</h3>\n              <p className=\"card-text\">\n                An optional second parameter can be passed a function. The\n                return response is then used in the is-external check.\n              </p>\n              <form>\n                <div className=\"row\">\n                  <div className=\"col-lg-4 offset-lg-4\">\n                    <div className=\"form-group\">\n                      <input\n                        className=\"form-control\"\n                        placeholder=\"e.g. /outside-router/pdf\"\n                        value={advancedString}\n                        onChange={event =>\n                          setAdvancedString(event.target.value || '')\n                        }\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <h2>\n                        <span\n                          className={classNames({\n                            badge: true,\n                            'badge-success': isExternal(advancedString, to => {\n                              return to.toLowerCase().includes('/pdf');\n                            }),\n                            'badge-danger': !isExternal(advancedString, to => {\n                              return to.toLowerCase().includes('/pdf');\n                            })\n                          })}\n                        >\n                          {`${!isExternal(string) ? 'Not ' : ''}External`}\n                        </span>\n                      </h2>\n                    </div>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default IsExternal;\n","export default () => {\n  const r = () =>\n    Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  return (\n    r() + r() + r() + '-' + r() + '_' + r() + '-' + r() + '_' + r() + r() + r()\n  );\n};\n","import React, { useState } from 'react';\n\nimport guid from '../packages/guid';\n\nconst Guid = () => {\n  const [string, setString] = useState(guid());\n\n  return (\n    <div className=\"container pb-4\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div className=\"card bg-secondary text-white text-center\">\n            <div className=\"card-body\">\n              <h2 className=\"card-title display-4\">@bagofholding/guid</h2>\n              <p className=\"card-text\">\n                Quickly generate a GUID string for short term ops, e.g. queued{' '}\n                job IDs\n              </p>\n              <form>\n                <div className=\"row\">\n                  <div className=\"col-lg-4 offset-lg-4\">\n                    <div className=\"form-group\">\n                      <input\n                        className=\"form-control\"\n                        placeholder=\"e.g https://github.com\"\n                        value={string}\n                        disabled\n                        readOnly\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-dark\"\n                        onClick={() => setString(guid())}\n                      >\n                        New GUID\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Guid;\n","export default () => {\n  return typeof window !== 'undefined' && window.document;\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport isClient from '../packages/is-client';\n\nconst IsClient = () => {\n  return (\n    <div className=\"container pb-4\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div className=\"card bg-secondary text-white text-center\">\n            <div className=\"card-body\">\n              <h2 className=\"card-title display-4\">@bagofholding/is-client</h2>\n              <p className=\"card-text\">\n                Detects if the script is being running client (browser) side.\n                This one is going to be difficult to demo.\n              </p>\n              <form>\n                <div className=\"row\">\n                  <div className=\"col-12\">\n                    <div className=\"form-group\">\n                      <h3>Are you using a browser right now?</h3>\n                      <h2>\n                        <span\n                          className={classNames({\n                            badge: true,\n                            'badge-success': isClient(),\n                            'badge-danger': !isClient()\n                          })}\n                        >\n                          {isClient()\n                            ? 'Yes!'\n                            : 'No! Wait, how did you do that?'}\n                        </span>\n                      </h2>\n                    </div>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default IsClient;\n","import React, { useState } from 'react';\n\nimport stripCharsUrlSafe from '../packages/strip-chars-url-safe';\n\nconst StripChars = () => {\n  const [string, setString] = useState(\n    'This is an Iñtërnâtiônàlizætiøn place! For Internationalization people!'\n  );\n\n  return (\n    <div className=\"container pb-4\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div className=\"card bg-secondary text-white text-center\">\n            <div className=\"card-body\">\n              <h2 className=\"card-title display-4\">\n                @bagofholding/strip-chars-url-safe\n              </h2>\n              <p className=\"card-text\">\n                Converts a string to a URL safe string for filenames or slugs.\n              </p>\n              <form>\n                <div className=\"row\">\n                  <div className=\"col-lg-4 offset-lg-4\">\n                    <div className=\"form-group\">\n                      <input\n                        className=\"form-control\"\n                        value={string}\n                        onChange={event => setString(event.target.value || '')}\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div className=\"form-group\">\n                  <h2>\n                    <span className=\"badge badge-dark text-wrap\">\n                      {stripCharsUrlSafe(string)}\n                    </span>\n                  </h2>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StripChars;\n","export default (string = '') => {\n  return String(string)\n    .toLowerCase()\n    .replace(/[ ]/gi, '-')\n    .replace(/[^a-z0-9-]/gi, '')\n    .replace(/-{2,}/g, '-')\n    .replace(/(^-)|(-$)/g, '');\n};\n","/**\n * Credit: rotareti@stackoverflow - https://stackoverflow.com/a/38340730\n * Modifications to resolve an object/array comparison mismatch by @penguinofwar\n * Modifications to resolve fromEntries issues in node 10: fromentries. MIT License. Feross Aboukhadijeh <https://feross.org/opensource>\n */\n\nexport const fromEntries = iterable => {\n  return [...iterable].reduce((obj, [key, val]) => {\n    obj[key] = val;\n    return obj;\n  }, {});\n};\n\nexport const isObject = obj => {\n  return obj && typeof obj === 'object';\n};\n\nexport const isArray = object => {\n  return object instanceof Array;\n};\n\nconst removeEmptyProps = (object = {}) => {\n  if (!Object.fromEntries || typeof Object.fromEntries !== 'function') {\n    Object.fromEntries = fromEntries;\n  }\n\n  return Object.fromEntries(\n    Object.entries(object)\n      .filter(([_k, v]) => v !== null)\n      .map(([k, v]) => {\n        if (isArray(v)) {\n          return [k, v];\n        } else if (isObject(v)) {\n          return [k, removeEmptyProps(v)];\n        }\n\n        return [k, v];\n      })\n  );\n};\n\nexport default removeEmptyProps;\n","import React, { useState } from 'react';\nimport AceEditor from 'react-ace';\n\nimport removeEmptyProps from '../packages/remove-empty-props';\n\nimport 'ace-builds/src-noconflict/mode-json';\nimport 'ace-builds/src-noconflict/theme-monokai';\n\nconst RemoveEmptyProps = () => {\n  const [object, setObject] = useState(\n    JSON.stringify(\n      {\n        foo: null,\n        bar: undefined,\n        baz: '',\n        fab: false,\n        gib: '༼ つ ◕_◕ ༽つ',\n        nested: {\n          one: 1,\n          two: '2',\n          three: Number('3'),\n          four: null,\n          five: undefined,\n          six: {},\n          seven: []\n        }\n      },\n      null,\n      2\n    )\n  );\n\n  console.log(removeEmptyProps(JSON.parse(object)));\n\n  return (\n    <div className=\"container pb-4\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div className=\"card bg-secondary text-white text-center\">\n            <div className=\"card-body\">\n              <h2 className=\"card-title display-4\">\n                @bagofholding/remove-empty-props\n              </h2>\n              <p className=\"card-text\">\n                Enter some <kbd>JSON</kbd> below and watch the <kbd>null</kbd>{' '}\n                and <kbd>undefinied</kbd> properties magically disappear...\n                recursively!\n              </p>\n              <form>\n                <div className=\"row\">\n                  <div className=\"col-lg-8 offset-lg-2\">\n                    <div className=\"form-group\">\n                      <AceEditor\n                        mode=\"json\"\n                        theme=\"monokai\"\n                        className=\"w-100\"\n                        onChange={value => {\n                          try {\n                            const converted = JSON.stringify(\n                              JSON.parse(value),\n                              null,\n                              2\n                            );\n                            setObject(converted);\n                          } catch (err) {\n                            console.warn(err);\n                          }\n                        }}\n                        name=\"remove-empty-props\"\n                        defaultValue={object}\n                        wrapEnabled={true}\n                        editorProps={{ $blockScrolling: true }}\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <AceEditor\n                        mode=\"json\"\n                        theme=\"monokai\"\n                        className=\"w-100\"\n                        onChange={() => {}}\n                        name=\"remove-empty-props\"\n                        value={JSON.stringify(\n                          removeEmptyProps(JSON.parse(String(object))),\n                          null,\n                          2\n                        )}\n                        wrapEnabled={true}\n                        readOnly={true}\n                        tabSize={2}\n                        editorProps={{ $blockScrolling: true }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RemoveEmptyProps;\n","import React from 'react';\n\nimport CamelToKebab from '../../components/CamelToKebab';\nimport IsExternal from '../../components/IsExternal';\nimport Guid from '../../components/Guid';\nimport IsClient from '../../components/IsClient';\nimport StripChars from '../../components/StripChars';\nimport RemoveEmptyProps from '../../components/RemoveEmptyProps';\n\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <div className=\"container app\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div className=\"jumbotron bg-secondary text-white text-center\">\n            <div className=\"row\">\n              <div className=\"col-lg-6 offset-lg-3\">\n                <h1 className=\"display-4\">Bag Of Holding</h1>\n              </div>\n            </div>\n            <p className=\"lead\">\n              A magical grab bag of useful tools for the discerning developer\n            </p>\n            <hr className=\"my-4\" />\n            <p>\n              On this page you will find interactive examples. Please consult\n              the documentation for further details and a tutorial.\n            </p>\n            <ul className=\"list-inline\">\n              <li className=\"list-inline-item\">\n                <a\n                  className=\"btn btn-dark btn-lg\"\n                  href=\"https://github.com/PenguinOfWar/bagofholding\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  role=\"button\"\n                >\n                  Documentation\n                </a>\n              </li>\n              <li className=\"list-inline-item\">\n                <a\n                  className=\"btn btn-dark btn-lg\"\n                  href=\"https://github.com/PenguinOfWar/bagofholding/issues\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  role=\"button\"\n                >\n                  Support\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <RemoveEmptyProps />\n      </div>\n      <div className=\"row\">\n        <CamelToKebab />\n      </div>\n      <div className=\"row\">\n        <IsExternal />\n      </div>\n      <div className=\"row\">\n        <Guid />\n      </div>\n      <div className=\"row\">\n        <IsClient />\n      </div>\n      <div className=\"row\">\n        <StripChars />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}