{"version":3,"sources":["packages/is-external/is-external.js","components/IsExternal.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["to","customConditional","isExternal","test","toLowerCase","IsExternal","useState","string","setString","advancedString","setAdvancedString","className","placeholder","value","onChange","event","target","classNames","badge","includes","App","href","rel","role","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kQAAe,WAACA,EAAIC,GAClB,IAAIC,GAAa,EAWjB,OARE,oBAAoBC,KAAKH,EAAGI,gBAC5B,kBAAkBD,KAAKH,EAAGI,gBACzBH,GAECA,EAAkBD,MAEpBE,GAAa,GAERA,GCqFMG,EA5FI,WAAO,IAAD,EACKC,mBAAS,IADd,mBAChBC,EADgB,KACRC,EADQ,OAEqBF,mBAAS,IAF9B,mBAEhBG,EAFgB,KAEAC,EAFA,KAIvB,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,4CACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,wBAAd,6BAGA,uBAAGA,UAAU,aAAb,+DAGA,8BACE,yBAAKA,UAAU,OACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,cACb,2BACEA,UAAU,eACVC,YAAY,yBACZC,MAAON,EACPO,SAAU,SAAAC,GAAK,OAAIP,EAAUO,EAAMC,OAAOH,OAAS,QAGvD,yBAAKF,UAAU,cACb,4BACE,0BACEA,UAAWM,IAAW,CACpBC,OAAO,EACP,gBAAiBhB,EAAWK,GAC5B,gBAAiBL,EAAWK,MAJhC,UAOOL,EAAWK,GAAmB,GAAT,OAP5B,mBAeZ,wBAAII,UAAU,SACd,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,sBACA,uBAAGA,UAAU,aAAb,qHAIA,8BACE,yBAAKA,UAAU,OACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,cACb,2BACEA,UAAU,eACVC,YAAY,2BACZC,MAAOJ,EACPK,SAAU,SAAAC,GAAK,OACbL,EAAkBK,EAAMC,OAAOH,OAAS,QAI9C,yBAAKF,UAAU,cACb,4BACE,0BACEA,UAAWM,IAAW,CACpBC,OAAO,EACP,gBAAiBhB,EAAWO,GAAgB,SAAAT,GAC1C,OAAOA,EAAGI,cAAce,SAAS,WAEnC,gBAAiBjB,EAAWO,GAAgB,SAAAT,GAC1C,OAAOA,EAAGI,cAAce,SAAS,cAPvC,UAWOjB,EAAWK,GAAmB,GAAT,OAX5B,wBCZTa,G,MArDH,WACV,OACE,yBAAKT,UAAU,iBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,iDACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,aAAd,oBAGJ,uBAAGA,UAAU,QAAb,mEAGA,wBAAIA,UAAU,SACd,oJAIA,wBAAIA,UAAU,eACZ,wBAAIA,UAAU,oBACZ,uBACEA,UAAU,sBACVU,KAAK,sDACLL,OAAO,SACPM,IAAI,sBACJC,KAAK,UALP,kBAUF,wBAAIZ,UAAU,oBACZ,uBACEA,UAAU,sBACVU,KAAK,6DACLL,OAAO,SACPM,IAAI,sBACJC,KAAK,UALP,gBAcV,yBAAKZ,UAAU,OACb,kBAAC,EAAD,UCzCYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f4117689.chunk.js","sourcesContent":["export default (to, customConditional) => {\n  let isExternal = false;\n\n  if (\n    /^(f|ht)tps?:\\/\\//i.test(to.toLowerCase()) ||\n    /^mailto:([^?]*)/.test(to.toLowerCase()) ||\n    (customConditional &&\n      typeof (customConditional === 'function') &&\n      customConditional(to))\n  ) {\n    isExternal = true;\n  }\n  return isExternal;\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport isExternal from '../packages/is-external';\n\nconst IsExternal = () => {\n  const [string, setString] = useState('');\n  const [advancedString, setAdvancedString] = useState('');\n\n  return (\n    <div className=\"container pb-4\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div className=\"card bg-secondary text-white text-center\">\n            <div className=\"card-body\">\n              <h2 className=\"card-title display-4\">\n                @bagofholding/is-external\n              </h2>\n              <p className=\"card-text\">\n                Enter a string below to find out if it is an external link.\n              </p>\n              <form>\n                <div className=\"row\">\n                  <div className=\"col-lg-4 offset-lg-4\">\n                    <div className=\"form-group\">\n                      <input\n                        className=\"form-control\"\n                        placeholder=\"e.g https://github.com\"\n                        value={string}\n                        onChange={event => setString(event.target.value || '')}\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <h2>\n                        <span\n                          className={classNames({\n                            badge: true,\n                            'badge-success': isExternal(string),\n                            'badge-danger': !isExternal(string)\n                          })}\n                        >\n                          {`${!isExternal(string) ? 'Not ' : ''}External`}\n                        </span>\n                      </h2>\n                    </div>\n                  </div>\n                </div>\n              </form>\n            </div>\n            <hr className=\"my-4\" />\n            <div className=\"card-body\">\n              <h3 className=\"card-title\">Custom Conditional</h3>\n              <p className=\"card-text\">\n                An optional second parameter can be passed a function. The\n                return response is then used in the is-external check.\n              </p>\n              <form>\n                <div className=\"row\">\n                  <div className=\"col-lg-4 offset-lg-4\">\n                    <div className=\"form-group\">\n                      <input\n                        className=\"form-control\"\n                        placeholder=\"e.g. /outside-router/pdf\"\n                        value={advancedString}\n                        onChange={event =>\n                          setAdvancedString(event.target.value || '')\n                        }\n                      />\n                    </div>\n                    <div className=\"form-group\">\n                      <h2>\n                        <span\n                          className={classNames({\n                            badge: true,\n                            'badge-success': isExternal(advancedString, to => {\n                              return to.toLowerCase().includes('/pdf');\n                            }),\n                            'badge-danger': !isExternal(advancedString, to => {\n                              return to.toLowerCase().includes('/pdf');\n                            })\n                          })}\n                        >\n                          {`${!isExternal(string) ? 'Not ' : ''}External`}\n                        </span>\n                      </h2>\n                    </div>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default IsExternal;\n","import React from 'react';\n\nimport IsExternal from '../../components/IsExternal';\n\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <div className=\"container app\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div className=\"jumbotron bg-secondary text-white text-center\">\n            <div className=\"row\">\n              <div className=\"col-lg-6 offset-lg-3\">\n                <h1 className=\"display-4\">Bag Of Holding</h1>\n              </div>\n            </div>\n            <p className=\"lead\">\n              A magical grab bag of useful tools for the discerning developer\n            </p>\n            <hr className=\"my-4\" />\n            <p>\n              On this page you will find interactive examples. Please consult\n              the documentation for further details and a tutorial.\n            </p>\n            <ul className=\"list-inline\">\n              <li className=\"list-inline-item\">\n                <a\n                  className=\"btn btn-dark btn-lg\"\n                  href=\"https://github.com/PenguinOfWar/reducks-redux-queue\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  role=\"button\"\n                >\n                  Documentation\n                </a>\n              </li>\n              <li className=\"list-inline-item\">\n                <a\n                  className=\"btn btn-dark btn-lg\"\n                  href=\"https://github.com/PenguinOfWar/reducks-redux-queue/issues\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  role=\"button\"\n                >\n                  Support\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <IsExternal />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}